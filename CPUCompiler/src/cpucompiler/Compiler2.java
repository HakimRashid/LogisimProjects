/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cpucompiler;

import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 *
 * @author Hakim
 */
public class Compiler2 extends javax.swing.JFrame {

    /**
     * Creates new form Compiler2
     */
    public Compiler2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        doAction = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.setColumns(20);
        input.setRows(5);
        jScrollPane1.setViewportView(input);

        output.setColumns(20);
        output.setLineWrap(true);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        doAction.setText("Compile");
        doAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(doAction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(doAction)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doActionActionPerformed
        try {
            String out = "";
            Scanner scText = new Scanner(input.getText());
            while (scText.hasNextLine()) {
                String line = scText.nextLine();
                Scanner scLine = new Scanner(line).useDelimiter(" ");
                String opCode = scLine.next();
                String var1 = "";
                String var2 = "";
                if (line.contains(" ")) {
                    var1 = scLine.next().replace(",", "");
                }
                if (line.contains(",")) {
                    var2 = scLine.next();
                }
                String hex = "";
                Translator t = new Translator();
                switch (opCode) {
                    //DATA TRANSFER INSTRUCTIONS
                    case "MOV":
                        if (var2.equals("[H-L]")) {
                            hex = t.BinToHex(Integer.parseInt("10" + t.RegCode(var1).substring(0, 2))) + t.BinToHex(Integer.parseInt(t.RegCode(var1).charAt(2) + "111"));
                        } else {
                            if (var1.equals("[H-L]")) {
                                hex = t.BinToHex(Integer.parseInt("1011")) + t.BinToHex(Integer.parseInt("1" + t.RegCode(var2)));
                            } else {
                                if (!(var2.charAt(0) == 'H') && var2.endsWith("H")) {
                                    hex = t.BinToHex(Integer.parseInt("11" + t.RegCode(var1).substring(0, 2))) + t.BinToHex(Integer.parseInt(t.RegCode(var1).charAt(2) + "111")) + " " + var2.substring(0, 2) + " " + var2.substring(2, 4);
                                } else {
                                    if (!(var1.charAt(0) == 'H') && var1.endsWith("H")) {
                                        hex = t.BinToHex(Integer.parseInt("1111")) + t.BinToHex(Integer.parseInt("1" + t.RegCode(var2))) + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                                    } else {
                                        hex = t.BinToHex(Integer.parseInt("11" + t.RegCode(var1).substring(0, 2))) + t.BinToHex(Integer.parseInt(t.RegCode(var1).charAt(2) + t.RegCode(var2)));
                                    }
                                }
                            }
                        }
                        break;
                    case "MVI":
                        if (var2.contains("-")) {
                            hex = t.BinToHex(Integer.parseInt("100" + t.RegPairCode(var2).charAt(1))) + t.BinToHex(Integer.parseInt(t.RegPairCode(var2).charAt(0) + "011")) + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        } else {
                            hex = t.BinToHex(Integer.parseInt("1011")) + t.BinToHex(Integer.parseInt("0" + t.RegCode(var2))) + " " + var1.replace("H", "");
                        }
                        break;
                    case "POP":
                        if (var1.equals("A")) {
                            hex = "AD";
                        }
                        if (var1.equals("H-L")) {
                            hex = "A9";
                        }
                        break;
                    case "PUSH":
                        if (var1.equals("A")) {
                            hex = "A8";
                        }
                        if (var1.equals("H-L")) {
                            hex = "AA";
                        }
                        break;
                    //CONTROL INSTRUCTIONS
                    case "HLT":
                        hex = "BF";
                        break;
                    case "EI":
                        hex = "BE";
                        break;
                    case "DI":
                        hex = "BD";
                        break;
                    case "RIM":
                        hex = "BC";
                        break;
                    case "SIM":
                        hex = "BB";
                        break;
                    case "SLC":
                        hex = "BA";
                        break;
                    case "CLC":
                        hex = "B9";
                        break;
                    //IO INSTRUCTIONS
                    case "IN":
                        hex = "A8" + " " + var1.replace("H", "");
                        break;
                    case "OUT":
                        hex = "AE" + " " + var1.replace("H", "");
                        break;
                    //JUMP INSTRUCTIONS
                    case "PCHL":
                        hex = "48";
                        break;
                    case "JMP":
                        hex = "49" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JC":
                        hex = "40" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JNC":
                        hex = "41" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JZ":
                        hex = "44" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JNZ":
                        hex = "45" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JPE":
                        hex = "46" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "JPO":
                        hex = "46" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    //CALL INSTRUCTIONS
                    case "CALL":
                        hex = "77" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CC":
                        hex = "58" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CNC":
                        hex = "59" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CNS":
                        hex = "5A" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CS":
                        hex = "5B" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CZ":
                        hex = "5C" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CNZ":
                        hex = "5D" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CPE":
                        hex = "5E" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "CPO":
                        hex = "5F" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    //RETURN INSTRUCTIONS
                    case "RET":
                        hex = "68" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RC":
                        hex = "60" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RNC":
                        hex = "61" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RNS":
                        hex = "62" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RS":
                        hex = "63" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RZ":
                        hex = "64" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RNZ":
                        hex = "65" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RPE":
                        hex = "66" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    case "RPO":
                        hex = "67" + " " + var1.substring(0, 2) + " " + var1.substring(2, 4);
                        break;
                    //SOFTWARE INTERUPT(S)
                    case "RST":
                        hex = "5" + t.BinToHex(Integer.parseInt(t.DecToBin(var1)));
                        break;
                    //ARITHMETIC INSTRUCTIONS
                    case "ADD":
                        if (var1.contains("-")) {
                            hex = "7" + t.BinToHex(Integer.parseInt("1" + t.RegPairCode(var1)));
                        } else {
                            hex = "0" + t.RegCode2(var1);
                        }
                        break;
                    case "SUB":
                        if (var1.contains("-")) {
                            hex = "7" + t.BinToHex(Integer.parseInt("1" + t.RegPairCode(var1)));
                        } else {
                            hex = "0" + t.BinToHex(100 + Integer.parseInt("1" + t.RegCode2(var1)));
                        }
                        break;
                    case "AND":
                        hex = "1" + t.RegCode2(var1);
                        break;
                    case "OR":
                        hex = "1" + t.BinToHex(Integer.parseInt("1" + t.RegCode2(var1)));
                        break;
                    case "XOR":
                        hex = "2" + t.RegCode2(var1);
                        break;
                    case "NOT":
                        hex = "2" + t.BinToHex(Integer.parseInt("1" + t.RegCode2(var1)));
                        break;
                    case "ROR":
                        hex = "3" + t.RegCode2(var1);
                        break;
                    case "ROL":
                        hex = "3" + t.BinToHex(Integer.parseInt("1" + t.RegCode2(var1)));
                        break;
                    case "DAA":
                        hex = "69";
                        break;
                    case "INC":
                        if (var1.equals("H-L")) {
                            hex = "6B";
                        }
                        break;
                    case "DEC":
                        if (var1.equals("H-L")) {
                            hex = "6C";
                        }
                        break;
                }
                out += hex + " ";
            }
            output.setText(out);
        } catch (Exception e) {
            output.setText(e + "");
        }
    }//GEN-LAST:event_doActionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compiler2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compiler2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compiler2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compiler2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compiler2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doAction;
    private javax.swing.JTextArea input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
